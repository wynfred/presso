#!/usr/bin/python3
import asyncio
import json
import logging
import sys

from pydoc import locate

from presso.core import util
from presso.core.eventqueue import EventQueue


def run():
    if len(sys.argv) != 2:
        print('Usage: presso_run manifest.json')
        exit()
    manifest = json.load(open(sys.argv[1]))
    # Setup logger
    log_format = '[%(levelname)s|%(module)s|%(asctime)s] %(message)s'
    log_level = getattr(logging, manifest['log']['level'].upper(), None)
    logging.basicConfig(filename=manifest['log']['file'], format=log_format, level=log_level)
    # Load dataevents
    dataevents = {}
    for name, info in manifest['dataevents'].items():
        module = locate(info['module'])
        dataevents[name] = module(info['data_path'], info['history_file'], info['config'])
    # Load connectors
    connectors = {}
    for connector in manifest['connectors']:
        module = locate(connector['module'])(
            {name: dataevents[name] for name in connector['dataevents']},
            connector['config']
        )
        connectors[connector['name']] = module
    # Load statistics
    statistics = []
    for stat in manifest['statistics']:
        module = locate(stat['module'])(stat['config'])
        statistics.append(module)
    # Load portfolio
    portfolio = locate(manifest['module'])(connectors, statistics, manifest['config'])
    util.IS_REALTIME = manifest['realtime']
    # Load alphas
    for alpha in manifest['alphas']:
        module = locate(alpha['module'])(
            portfolio,
            dataevents[alpha['main_dataevent']],
            {name: dataevents[name] for name in alpha['dataevents']},
            alpha['config']
        )
        dataevents[alpha['main_dataevent']].addAlpha(module)

    # Start portfolio
    loop = asyncio.get_event_loop()
    event_queue = EventQueue.getInstance()
    async def main():
        # Let DataEvents to run first
        await asyncio.sleep(1)
        await event_queue.consume()
    # Press ENTER to stop eventloop and run statistics
    def stop():
        for dataevent in dataevents.values():
            dataevent.shutdown()
        asyncio.wait(asyncio.sleep(1))
        loop.stop()
    loop.add_reader(sys.stdin, stop)
    try:
        loop.run_until_complete(main())
    except RuntimeError as error:
        if str(error) == 'Event loop stopped before Future completed.':
            print('Event Loop Stopped')
            util.LOG.info('Event Loop Stopped')
        else:
            util.LOG.error(error)
    portfolio.runStatistics()

if __name__ == '__main__':
    run()
